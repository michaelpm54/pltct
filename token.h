/* SPDX-License-Identifier: GPLv3-or-later */

#ifndef TOKEN_H
#define TOKEN_H

#include <string>

typedef enum TokenType_s
{
	TOKEN_NONE,
	TOKEN_UNKNOWN,
	TOKEN_EOF,
	TOKEN_NUMBER,
	TOKEN_IDENTIFIER,

	// Keywords
	TOKEN_PRINT,
	TOKEN_INPUT,
	TOKEN_LET,
	TOKEN_WHILE,
	TOKEN_ENDWHILE,
	TOKEN_REPEAT,

	// Arithmetic
	TOKEN_MULTIPLY,
	TOKEN_DIVIDE,
	TOKEN_ADD,
	TOKEN_SUBTRACT,

	// Comparison
	TOKEN_LESS,
	TOKEN_GREATER,
	TOKEN_GE,
	TOKEN_LE,
	TOKEN_EQUAL,

	TOKEN_ASSIGN,
	TOKEN_STRING,
	TOKEN_NEWLINE,

	// Meta
	TOKEN_ARITHMETIC_OPERATORS_BEGIN = TOKEN_MULTIPLY,
	TOKEN_ARITHMETIC_OPERATORS_END = TOKEN_SUBTRACT,
	TOKEN_COMPARISON_OPERATORS_BEGIN = TOKEN_LESS,
	TOKEN_COMPARISON_OPERATORS_END = TOKEN_EQUAL,
	TOKEN_KEYWORDS_BEGIN = TOKEN_PRINT,
	TOKEN_KEYWORDS_END = TOKEN_REPEAT,
} TokenType;

struct Token
{
	TokenType type{TOKEN_NONE};
	std::string text;
};

#endif // TOKEN_H
